xxx name
16  type
16  class
32  ttl
16  length
xxx data



types:
1   A
2   NS
5   CNAME
6   SOA
11  WKS
12  PTR
13  HINFO
15  MX
16  TXT
28  AAAA
257 CAA
37  CERT
43  DS
35  NAPTR
61  OPENPGPKEY
33  SRV
44  SSHFP
52  TLSA
64  SCVB
65  HTTPS


pseudo types:
252 AXFR
255 * (ANY)


classes
1   IN (Internet)
2   CSNET
3   CHAOS
4   HS



Types
=====

CNAME: data is just the domain name that is canonical

HINFO: string of CPU data, string of OS data. See RFC1010 for standard values (1010 says limit is 40 characters, uppercase letters, numbers, and hyphen and slash only. As the list was established in 1987, there is no option for Linux nor Windows, but there are several UNIVAC, VAX, SUN, and an MSDOS in there. Probably, this is very unuseful these days.

MX: 16bit preference, string domain name

NS: data is just the domain name (format same as CNAME)

PTR: just like CNAME (but no special processing)

SOA: name of primary server (MNAME), mailbox in domain format (RNAME), 32bit serial number, 32bit refresh interval, 32bit retry interval, 32bit exiration limit time, zone TTL (formerlly used as the minimum TTL of every record in zone, now it is the TTL of NXDOMAIN responses (and maybe NODATA responses?))

TXT: one or more character strings

A: 32bit address

WKS: 32bit address, 8bit IP protocol number, bitmap of ports (Probably not useful these days; hosts just try the connection, and the protocol is pretty generic. That is, the protocol might be 6 meaning "TCP", not the higher level stuff like HTTP or SMTP, they assume the higher level is based on standard port numbers) (should use SRV records instead)

SRV: RFC2052 doesn't seem to directly specify the on-the-wire format. Appears to be
    16 bit priority
    16 bit weight
    16 bit port
    domain name for target 

NAPTR:
    16bit order
    16bit preference
    text string for flags (I assume of the format of TXT records, but only one string allowed?)
    text string for services
    text string for regexp
    domain name for replacement

CAA:
    8bit flags (RFC6844 defines the values 128 and 0, where 128 means critical)
    8bit tag length
    text string for tag (US-ASCII only, should be between 1 and 15 characters long, and should only be alpha-numeric, canonically lower case)
    n-byte binary blob, but canonically a text string. Interpretation depends on the 'tag'.

TLSA: RFC 6698
    8bit certificate usage
    8bit selector
    8bit matching type
    n-byte data

DS: RFC 3658
    16bit key tag
    8bit algorithm
    8bit digest type
    n-byte digest

SSHFP: RFC 4255, 6594, 7479
    8bit algorithm (1=rsa, 2=dss (dsa?), 3=ecdsa, 4=ed25519)
    8bit fingerprint type (1=sha-1, 2=sha2-256)
    n-byte fingerprint

SVCB: RFC 9460
    16bit priority (0 for alias mode, expect no svcparams)
    domainname target (uncompressed) (may be the root domain '.', for alias, this indicates service doesn't exist; for service, means use owner domain as target)
    n-byte data for SvcParams, TLV list, sorted by key:
        16bit key
	16bit length
	n-byte value

    keys:
    0->mandatory (sorted array of 16bit numbers)
    1->alpn (list of 8bit length, N-byte text)
    2->no-default-alpn (no value; requires alpn also be specified)
    3->port (16bit value)
    4->ipv4hint (array of 32bit addresses)
    5->ech
    6->ipv6hint (array of 128bit addresses)
    65535 invalid key

HTTPS: RFC 9460
    same as SVCB, but perhaps warn if 'port' or 'no-default-alpn' is listed as a mandatory value (HTTPS defines these as already mandatory, so explicitly specifying them is redundant and wastes space.)

CDB format
==========

there are 2 kinds of keys. Keys that start with '\0' '%' are location keys. After the percent sign are the bytes of the bytes of the IP prefix. The value is the 2 byte location identifier
Otherwise, keys are domain names in DNS label format (that is LV (length+value) for each label in the name, ending with the 0 length label (root). The value is as follows:

  16bit big endian type (e.g. 1 = A, 16 = TXT, 28 = AAAA)
  1 byte, '=' or '>'. If '=', this is a general record, if '>', next 2 bytes are location code
  2 bytes (optional): location code (only if previous byte is '>')
  32bit big endian TTL value
  64bit TTD value (probably big endian)
  n byte raw Resource Record data

records in the CDB are added in the order of the source file. Duplicates are allowed in the original. This can be annoying if you don't know what you are doing, but possibly useful for unbalanced round-robin designs.


